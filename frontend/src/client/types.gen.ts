// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type EventCreate = {
  name: string
  audience_peak?: number
  started_at?: string | null
  expired_at?: string | null
}

export type EventPublic = {
  name: string
  audience_peak?: number
  started_at?: string | null
  expired_at?: string | null
  id: string
  owner_id: string
  code: string
}

export type EventsPublic = {
  data: Array<EventPublic>
  count: number
}

export type EventUpdate = {
  name: string
  audience_peak?: number
  started_at?: string | null
  expired_at?: string | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type QuestionCreate = {
  title?: string | null
  content: string
  position?: number
  pinned?: boolean
  like_count?: number
  followup_count?: number
}

export type QuestionPublic = {
  title?: string | null
  content: string
  position?: number
  pinned?: boolean
  like_count: number
  followup_count?: number
  id: string
  event_id: string
  parent_id: string | null
  inserted_at: string
  user_name?: string | null
  attendee_identifier?: string | null
}

export type QuestionsPublic = {
  data: Array<QuestionPublic>
  count: number
}

export type QuestionUpdate = {
  title?: string | null
  content?: string | null
  position?: number | null
  pinned?: boolean | null
  like_count?: number
  followup_count?: number
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type EventsListEventsResponse = EventsPublic

export type EventsNewEventData = {
  requestBody: EventCreate
}

export type EventsNewEventResponse = EventPublic

export type EventsEditEventData = {
  id: string
  requestBody: EventUpdate
}

export type EventsEditEventResponse = EventPublic

export type EventsGetEventData = {
  id: string
}

export type EventsGetEventResponse = EventPublic

export type EventsEventStatsData = {
  id: number
}

export type EventsEventStatsResponse = unknown

export type EventsGenerateSlideResponse = unknown

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type QuestionsListQuestionsData = {
  eventId: string
  order?: "asc" | "desc"
  parentId?: string | null
  sortBy?: "created_at" | "likes"
}

export type QuestionsListQuestionsResponse = QuestionsPublic

export type QuestionsCreateQuestionData = {
  attendeeIdentifier: string
  eventId: string
  parentId?: string | null
  requestBody: QuestionCreate
  userName: string
}

export type QuestionsCreateQuestionResponse = QuestionPublic

export type QuestionsUpdateQuestionData = {
  attendeeIdentifier: string
  eventId: string
  id: string
  requestBody: QuestionUpdate
}

export type QuestionsUpdateQuestionResponse = QuestionPublic

export type QuestionsGetQuestionData = {
  eventId: string
  id: string
}

export type QuestionsGetQuestionResponse = QuestionPublic

export type QuestionsDeleteQuestionData = {
  attendeeIdentifier: string
  eventId: string
  id: string
}

export type QuestionsDeleteQuestionResponse = unknown

export type QuestionsLikeQuestionData = {
  eventId: string
  id: string
}

export type QuestionsLikeQuestionResponse = unknown

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
